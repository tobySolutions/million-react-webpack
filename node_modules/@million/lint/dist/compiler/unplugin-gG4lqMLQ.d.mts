import { ParserOptions } from '@babel/core';

interface External {
    kind: string;
    loc: SourceLocation;
    jsx: boolean;
}
interface Change {
    unstable: boolean;
    count: number;
    prev: string;
    next: string;
    type: string;
}
interface Render {
    kind: string;
    loc: SourceLocation;
    selfTime: number;
    totalTime: number;
    count: number;
    filename: string | null;
    owner: string | null;
    self: string | null;
    changes: Array<Change>;
}
interface Component {
    componentName: string;
    loc: SourceLocation;
    externals: Record<string, External>;
    renders: Array<Render>;
    children: {
        [componentName: string]: string;
    };
    parents: {
        [componentName: string]: string;
    };
    filename?: string;
    isLazyLoadable?: boolean;
    instances: number;
    get count(): number;
}
type SourceLocation = [number, number, number, number];

interface BuildData {
    [filename: string]: {
        components: Record<string, Component>;
    };
}
interface Encoder {
    BUILD_ID: string;
    encode: (value: string | SourceLocation) => number;
    registerFile: (filename: string) => number;
    registerComponent: (filename: string, componentName: string, externals: Record<string, any>, loc: SourceLocation) => number;
    data: BuildData;
    encoding: Array<string | SourceLocation>;
}

interface Options {
    plugins?: ParserOptions["plugins"];
    filter?: {
        include?: string | RegExp | Array<string | RegExp>;
        exclude?: string | RegExp | Array<string | RegExp>;
    };
    filename?: string;
    rsc?: boolean;
    dev?: "debug" | boolean;
    legacyHmr?: boolean;
    framework?: string;
    measureBundleSize?: boolean;
    source?: string;
    isJSX?: boolean;
    encoder?: Encoder;
}

export type { Options as O };
